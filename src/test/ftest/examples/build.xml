<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
JBoss, Home of Professional Open Source
Copyright 2008, Red Hat Middleware LLC, and individual contributors
by the @authors tag. See the copyright.txt in the distribution for a
full listing of individual contributors.

This is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2.1 of
the License, or (at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this software; if not, write to the Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->
<project name="ftest.example.common.build" basedir="." default="build" xmlns:server="http://jboss.org/ns/test/ant/server">

	<!-- Location of Seam -->
	<dirname property="seam.dir" file="${ant.file.ftest.example.common.build}/../../../../" />

	<!-- default property setup -->
	<property file="${seam.dir}/src/test/ftest/ftest.properties" />

	<property name="ftest.dir" value="${seam.dir}/src/test/ftest" />
	<property name="src.dir" value="src" />
	<property name="common.src.dir" value="${ftest.dir}/src/main" />
	<property name="build.dir" value="build" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="test.output.dir" value="${seam.dir}/test-output" />
	<property name="ftest.lib.dir" value="${ftest.dir}/lib" />
	<property name="log.dir" value="log" />
	<property name="test.report.dir" value="test-report" />

	<!-- default deployment targets -->
	<property name="jboss4.deploy.target" value="deploy" />
	<property name="jboss5.deploy.target" value="${jboss4.deploy.target}" />
	<property name="jboss4.undeploy.target" value="undeploy" />
	<property name="jboss5.undeploy.target" value="${jboss4.undeploy.target}" />
	<property name="jboss-embedded.deploy.target" value="tomcat.deploy" />
	<property name="jboss-embedded.undeploy.target" value="tomcat.undeploy" />
	<property name="tomcat6.deploy.target" value="tomcat6.deploy" />
	<property name="tomcat6.undeploy.target" value="tomcat6.undeploy" />
	<!-- default context paths -->
	<property name="jboss4.context.path" value="/seam-${example.name}" />
	<property name="jboss5.context.path" value="${jboss4.context.path}" />
	<property name="jboss-embedded.context.path" value="/jboss-seam-${example.name}" />
	<property name="tomcat6.context.path" value="${jboss-embedded.context.path}" />
	
	<property name="functional.listener" value="org.jboss.seam.example.common.test.selenium.SeleniumFunctionalTestListener"/>
	<property name="root.lib.dir" value="${seam.dir}/lib" />


	<!-- common path setup -->

	<path id="classpath.build">
		<fileset dir="${root.lib.dir}" includes="**/*.jar" />
		<fileset dir="${ftest.lib.dir}" includes="**/*.jar" />
	</path>

	<path id="classpath.test">
		<path refid="classpath.build" />
		<path location="${classes.dir}" />
	</path>

	<taskdef name="config" classname="org.jboss.ant.taskdefs.server.ConfigManagerTask" uri="http://jboss.org/ns/test/ant/server" loaderref="server.loader" classpathref="classpath.build" />
	<taskdef name="start" classname="org.jboss.ant.taskdefs.server.StartServerTask" uri="http://jboss.org/ns/test/ant/server" loaderref="server.loader" classpathref="classpath.build" />
	<taskdef name="stop" classname="org.jboss.ant.taskdefs.server.StopServerTask" uri="http://jboss.org/ns/test/ant/server" loaderref="server.loader" classpathref="classpath.build" />

	<!-- common target definitions -->

	<target name="clean" description="Delete all generated files">
		<delete dir="${build.dir}" />
		<delete dir="${test.output.dir}" />
		<delete dir="${report.dir}" />
		<delete dir="${log.dir}" />
	</target>

	<!-- override this target in example to get specific behaviour -->
	<target name="build.extras" description="Build example specific files before build">
	</target>

	<target name="build" depends="build.common, build.extras" description="Compiles the Test">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath.build" debug="true" />
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<!-- TODO we should compile this once to a common place not build for each example -->
	<!-- TODO if needed we should allow examples to exclude/include src under 
        common dvd does not care about booking for example-->
	<target name="build.common" description="Compiles the common selenium test code">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${common.src.dir}" destdir="${classes.dir}" classpathref="classpath.build" debug="true" />
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="selenium.test" depends="build, container.properties" description="Run Tests">
		<taskdef resource="testngtasks" classpathref="classpath.test" />
		<mkdir dir="${test.output.dir}" />

		<!-- execute testng tests -->
		<testng haltonfailure="false" outputdir="${test.output.dir}" classpathref="classpath.test" listener="${functional.listener}">
			<xmlfileset file="${container}.xml" />
			<sysproperty key="selenium.server.port" value="${selenium.server.port}" />
			<sysproperty key="selenium.host" value="${selenium.host}" />
			<sysproperty key="selenium.browser" value="${selenium.browser}" />
			<sysproperty key="selenium.browser.url" value="${selenium.browser.url}" />
			<sysproperty key="selenium.speed" value="${selenium.speed}" />
			<sysproperty key="selenium.timeout" value="${selenium.timeout}" />
			<sysproperty key="example.context.path" value="${context.path}" />
			<sysproperty key="openid.account" value="${openid.account}" />
			<sysproperty key="openid.password" value="${openid.password}" />
			<sysproperty key="seam.dir" value="${seam.dir}" />
		</testng>
	</target>

	<target name="test" depends="build, container.properties" description="Run Tests">
		<!-- TODO all of these jboss commands must be optional with checks -->
		<!-- TODO  go get JBoss and extract -->

		<!-- TODO start JBoss -->
		<!-- clean example -->
		<ant antfile="${seam.dir}/examples/${example.name}/build.xml" target="clean" inheritall="false" dir="${seam.dir}/examples/${example.name}" />

		<!-- deploy the example-->
		<antcall target="deploy.example" />

		<!-- execute testng tests -->
		<antcall target="selenium.test" />

		<!-- undeploy the example -->
		<antcall target="undeploy.example" />

		<!-- TODO stop jboss -->

		<!-- TODO remove jboss -->
	</target>

	<!-- TODO get this to next level too - how to combine into one report -->
	<target name="testreport" depends="test" description="generate html report">
		<mkdir dir="${test.report.dir}" />
		<junitreport todir="${test.report.dir}">
			<fileset dir="${test.output.dir}">
				<include name="**/*.xml" />
				<exclude name="**/testng-*.xml" />
			</fileset>
			<report format="noframes" todir="${test.report.dir}" />
		</junitreport>
		<echo>Report available at ${report.dir}/junit-noframes.html</echo>
	</target>

	<target name="deploy.example" depends="container.properties">
		<property name="absolute.wait.url" value="${selenium.browser.url}${wait.url}" />
		<echo>Deploying ${example.name} example to ${container} using ${deploy.target} target</echo>
		<ant antfile="${seam.dir}/examples/${example.name}/build.xml" target="${deploy.target}" inheritall="false" dir="${seam.dir}/examples/${example.name}">
			<property name="jboss.home" value="${container.home}" />
			<property name="tomcat.home" value="${container.home}" />
			<propertyset refid="deploy.properties" />
		</ant>
		<!-- wait for the application to be active -->
		<!-- TODO is there a better way? -->
		<echo>Waiting ${wait.time} seconds for ${absolute.wait.url}</echo>
		<waitfor maxwait="${wait.time}" maxwaitunit="second">
			<and>
				<!-- wait for the application to not throw 404 -->
				<http url="${absolute.wait.url}" errorsBeginAt="404" />
			</and>
		</waitfor>
	</target>

	<target name="undeploy.example" depends="container.properties">
		<echo>Undeploying example ${example.name} from ${container} using ${undeploy.target} target</echo>
		<ant antfile="${seam.dir}/examples/${example.name}/build.xml" target="${undeploy.target}" inheritall="false" dir="${seam.dir}/examples/${example.name}">
			<property name="jboss.home" value="${container.home}" />
			<property name="tomcat.home" value="${container.home}" />
		</ant>
	</target>

	<target name="container.properties" depends="set.deploy.properties" unless="container.home">
		<set.container.properties container="${container}" />
	</target>

	<macrodef name="set.container.properties">
		<attribute name="container" />
		<sequential>
			<fail unless="@{container}.home" message="@{container}.home property has to be set" />
			<property name="container.home" value="${@{container}.home}" />
			<property name="container.profile" value="${@{container}.profile}" />
			<property name="container.jvm.arguments" value="${@{container}.jvm.arguments}" />
			<property name="deploy.target" value="${@{container}.deploy.target}" />
			<property name="undeploy.target" value="${@{container}.undeploy.target}" />
			<property name="context.path" value="${@{container}.context.path}" />
			<property name="wait.url" value="${context.path}" />
			<property name="wait.time" value="${@{container}.deploy.waittime}" />
			<propertyset id="deploy.properties" refid="${container}.deploy.properties" />
			<echo>Container properties set</echo>
		</sequential>
	</macrodef>

	<!-- this target sets empty deploy property sets by default -->
	<!-- override this target in example specific build.xml to specify property sets -->
	<target name="set.deploy.properties">
		<propertyset id="jboss4.deploy.properties" />
		<propertyset id="jboss5.deploy.properties" />
		<propertyset id="tomcat6.deploy.properties" />
		<propertyset id="jboss-embedded.deploy.properties" />
	</target>

	<target name="start.container.jboss" depends="container.properties">
		<server:config javaHome="${java.home}" jbossHome="${container.home}">
			<server name="${container.profile}">
				<jvmarg value="${container.jvm.arguments}" />
				<sysproperty key="java.endorsed.dirs" value="${container.home}/lib/endorsed" />
			</server>
		</server:config>
		<server:start name="${container.profile}" />
	</target>

	<target name="stop.container.jboss"  depends="container.properties" >
		<sequential>
			<echo message="Shutting down JBoss server"/>
			<java classname="org.jboss.Shutdown" fork="false" dir="${container.home}/bin">
				<classpath>
					<pathelement location="${container.home}/bin/shutdown.jar" />
					<!--<pathelement location="${container.home}/client/jbossall-client.jar" />-->
				</classpath>
				<arg value="--shutdown"/>
				<arg value="-u"/>
				<arg value="${jboss.jmx.username}"/>
				<arg value="-p"/>
				<arg value="${jboss.jmx.password}"/>
			</java>
			<waitfor maxwait="300" maxwaitunit="second">
				<not>
					<socket server="localhost" port="1099" />
				</not>
			</waitfor>
			<sleep seconds="3"/>
		</sequential>
	</target>

</project>
