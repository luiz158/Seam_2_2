<chapter id="websphere">
	<title>Seam on IBM's WebSphere AS v7</title>

	<section>
	  <title>WebSphere AS environment and version recommendation</title>

      <para>
        WebSphere Application Server v7 is IBM's application server offering. 
        This release is fully Java EE 5 certified.
      </para>

	  <para>
		WebSphere AS being a commercial product, we will not discuss the
		details of its installation. At best, we will instruct you to follow the directions
		provided by your particular installation type and license. 
      </para>

      <para>
       First, we will go over some basic considerations on how to run Seam applications under WebSphere AS v7.
       We will go over the details of these steps using the JEE5 booking example.
       We will also deploy the JPA (non-EJB3) example application. 
      </para>

	  <para>
	    All of the examples and information in this chapter are based on
		WebSphere AS v7. A trial version can be downloaded here :
        <ulink url="http://www.ibm.com/developerworks/downloads/ws/was"> WebSphere Application Server V7</ulink>
	  </para>
	  <para>
		WebSphere v7.0.0.3 is the minimal recommended version of WebSphere v7 to use
		with Seam. Earlier versions of WebSphere have bugs in the EJB container that will 
		cause various exceptions to occur at runtime. 
      </para>

	  <para>
        The following sections in this chapter assume that WebSphere is correctly installed and is
		functional, and a profile has been successfully created.	
      </para>
      
	  <para>
        This chapter explain how to compile, deploy and run some sample applications in WebSphere. These sample applications require
        a database. WebSphere comes by default with a set of sample applications called "Default Application". This set of sample applications
        use a Derby database running on the Derby instance installed with WebSphere. In order to keep this simple we'll use this Derby database created 
        for the "Default Applications". However, to run the sample application with the Derby database "as-is", a patched Hibernate
        dialect must be used (The patch changes the default "auto" key generation strategy) as explained in <xref linkend="glassfish" />.
        If you want to use another database, it's just a matter of creating a connection pool in WebSphere pointing to this database,
        declare the correct Hibernate dialect and set the correct JNDI name in <literal>persistence.xml</literal>.  
      </para>
   </section>
   

   <section>
     <title>Configuring the WebSphere Web Container</title>
     <para>
       This step is mandatory in order to have Seam applications run with WebSphere v7.
       Two extra properties must be added to the Web Container. Please refer to the IBM WebSphere Information Center for further explanations on those properties.
     </para>
     <para> 
       To add the extra properties: 
       <itemizedlist>
         <listitem>
           Open the WebSphere administration console
         </listitem>
         <listitem>
           Select the <literal>Servers/Server Types/WebSphere Application Servers</literal> in the left navigation menu
         </listitem>
         <listitem>
           Click on the server name (<literal>server1</literal>)
         </listitem>
         <listitem>
           On the right navigation menu, select <literal>Web Container Settings/Web container</literal>)
         </listitem>
         <listitem>
           On the right navigation menu, select <literal>custom properties</literal>) and add the following properties:
           <itemizedlist>
           <listitem>
             <literal>prependSlashToResource = true</literal>
           </listitem>
           <listitem>
             <literal>com.ibm.ws.webcontainer.invokefilterscompatibility = true</literal>
           </listitem>
          </itemizedlist>
         </listitem>
         <listitem>
           Save and restart the server
         </listitem>
       </itemizedlist>
     </para>
    </section>

	<section id="websphere-jndi-section">
	  <title>Seam and the WebSphere JNDI name space</title>
      <para>
        In order to use component injection, Seam needs to know how to lookup for session beans bound to the JNDI name space. 
        Seam provides two mechanisms to configure the way it will search for such resources:
		<itemizedlist>
		  <listitem>
              The global <literal>jndi-pattern</literal> switch on the <literal>&lt;core:init&gt;</literal>. in <literal>components.xml</literal>. 
			  The switch can use a special placeholder "<literal>#{ejbName}</literal>" that resolves to the unqualified name of the EJB
	      </listitem>
		  <listitem>
            <para>
              The <literal>@JndiName</literal> annotation
            </para>
	      </listitem>
       </itemizedlist>
      </para>
      <para>
        <xref linkend="config.integration.ejb.container"/> gives detailed explanations on how those mechanisms work.
      </para>
      
      <para>
        By default, WebSphere will bind the session bean in
		its local JNDI name space under a "short" binding name that adheres to the following pattern  
        <literal>ejblocal:&lt;package.qualified.local.interface.name&gt;</literal>.
      </para>
      <para>
        For a detailed description on how WebSphere v7 organizes and binds EJBs in its JNDI name spaces, please refer to the WebSphere Information Center.  
	  </para>
	  <para>
        As explained before, Seam needs to lookup for session bean as they appear in JNDI. 
        Basically, there are three strategies, in order of complexity:
        <itemizedlist>
		  <listitem>
			  Specify which JNDI name Seam must use for each session bean using the <literal>@JndiName</literal> annotation in the java source file
	      </listitem>
		  <listitem>
			  Override the default session bean names generated by WebSphere to conform to the <literal>jndi-pattern</literal> attribute
          </listitem>
          <listitem>
			  Use EJB references
          </listitem>
        </itemizedlist>
      </para>

      <section id="was.strategy1">
        <title>Strategy 1: Specify which JNDI name Seam must use for each Session Bean</title>
		<para>
		  This strategy is the simplest and fastest one regarding development. It uses the WebSphere v7 default binding mechanism. To use this strategy:
          <itemizedlist>
            <listitem>
                Add a <literal>@JndiName("ejblocal:&lt;package.qualified.local.interface.name&gt;)</literal> annotation to each session bean that is a Seam component.
            </listitem>
            <listitem>
              <para>
                In <literal>components.xml</literal>, add the following line:
                <programlisting role="XML"><![CDATA[<core:init jndi-name="java:comp/env/#{ejbName}" />]]></programlisting>
              </para>
            </listitem>
            <listitem>
              <para >
                Add a file named <literal>WEB-INF/classes/seam-jndi.properties</literal> in the web module with the following content:
                 <programlisting>com.ibm.websphere.naming.hostname.normalizer=com.ibm.ws.naming.util.DefaultHostnameNormalizer
java.naming.factory.initial=com.ibm.websphere.naming.WsnInitialContextFactory
com.ibm.websphere.naming.name.syntax=jndi
com.ibm.websphere.naming.namespace.connection=lazy
com.ibm.ws.naming.ldap.ldapinitctxfactory=com.sun.jndi.ldap.LdapCtxFactory
com.ibm.websphere.naming.jndicache.cacheobject=populated
com.ibm.websphere.naming.namespaceroot=defaultroot
com.ibm.ws.naming.wsn.factory.initial=com.ibm.ws.naming.util.WsnInitCtxFactory
com.ibm.websphere.naming.jndicache.maxcachelife=0
com.ibm.websphere.naming.jndicache.maxentrylife=0
com.ibm.websphere.naming.jndicache.cachename=providerURL
java.naming.provider.url=corbaloc:rir:/NameServiceServerRoot
java.naming.factory.url.pkgs=com.ibm.ws.runtime:com.ibm.ws.naming</programlisting>
              </para>
            </listitem>
            <listitem>
              <para>
                At the end of <literal>web.xml</literal>, add the following lines:
                <programlisting role="XML"><![CDATA[<ejb-local-ref>
   <ejb-ref-name>EjbSynchronizations</ejb-ref-name>
   <ejb-ref-type>Session</ejb-ref-type>
   <local-home></local-home>
   <local>org.jboss.seam.transaction.LocalEjbSynchronizations</local>
 </ejb-local-ref>]]></programlisting>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          That's all folks! No need to update any file during the development, nor to define any EJB to EJB or web to EJB reference!
        </para>
        <para>
		    Compared to the other strategies, this strategy has the advantage not to have to manage any EJBs reference and also not to have to maintain extra files.
		    The only drawback is one extra line in the java source code with the <literal>@JndiName</literal> annotation
        </para>
	  </section>
     
      <section>
        <title>Strategy 2: Override the default names generated by WebSphere</title>
		  There is no simple way to globally override the default naming strategy for session beans in WebSphere. 
          However, WebSphere provides a way to override the name of each bean.
        <para>
           To use this strategy:
           <itemizedlist>
            <listitem>
              <para>
                Add a file named <literal>META-INF/ibm-ejb-jar-ext.xml</literal> in the EJB module and add an entry for each session bean like this:
                <programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<ejb-jar-bnd
  xmlns="http://websphere.ibm.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://websphere.ibm.com/xml/ns/javaee 
                      http://websphere.ibm.com/xml/ns/javaee/ibm-ejb-jar-bnd_1_0.xsd"
  version="1.0">

 <session name="AuthenticatorAction" simple-binding-name="AuthenticatorAction" />
 <session name="BookingListAction" simple-binding-name="BookingListAction" />
 
</ejb-jar-bnd>]]></programlisting>
              WebSphere will then bind the <literal>AuthenticatorAction</literal> EJB to the <literal>ejblocal:AuthenticatorAction</literal> JNDI name
              </para>
            </listitem>
            <listitem>
              <para>
                In <literal>components.xml</literal>, add the following line:
                <programlisting role="XML"><![CDATA[<core:init jndi-name="ejblocal:#{ejbName}" />]]></programlisting>
              </para>
            </listitem>
            <listitem>
              <para>
                Add a file named <literal>WEB-INF/classes/seam-jndi.properties</literal> as described in strategy 1
              </para>
            </listitem>
            <listitem>
              <para>
                In <literal>web.xml</literal>, add the following lines (Note the different <literal>ejb-ref-name</literal> value):
                <programlisting role="XML"><![CDATA[<ejb-local-ref>
   <ejb-ref-name>ejblocal:EjbSynchronizations</ejb-ref-name>
   <ejb-ref-type>Session</ejb-ref-type>
   <local-home></local-home>
   <local>org.jboss.seam.transaction.LocalEjbSynchronizations</local>
 </ejb-local-ref>]]></programlisting>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para> 
          Compared to the first strategy, this strategy requires to maintain an extra file 
          (<literal>META-INF/ibm-ejb-jar-ext.xml</literal>), 
          where a line must be added  each time a new session bean is added to the application),
          but still does not require to maintain EJB reference between beans.
        </para>
      </section>
      
	  <section>
		  <title>Strategy 3: Use EJB references</title>
           This strategy is based on the usage of EJB references, from EJB to EJB and from the web module to EJB. To use it:
           <itemizedlist>
            <listitem>
                In <literal>components.xml</literal>, add the following line:
                <programlisting role="XML"><![CDATA[<core:init jndi-name="java:comp/env/#{ejbName}" />]]></programlisting>
            </listitem>
            <listitem>
              <para>
                Follow the instructions in <xref linkend="config.integration.ejb.container"/> to declare the references from web to EJB and from EJB to EJB
              </para>
            </listitem>
          </itemizedlist>
          <para>
           This is the most tedious strategy as each session bean referenced by another session bean (i.e. "injected") as to be declared in 
           <literal>ejb-jar.xml</literal> file.
           Also, each new session bean has to be added to the list of referenced bean in <literal>web.xml</literal> 
         </para>  
          
      </section>

	</section>

	<section id="websphere-timeout-section">
		<title>Configuring timeouts for Stateful Session Beans</title>
		<para>
         A timeout value has to be set for each stateful session bean used in the application because stateful bean must not expire in WebSphere while Seam 
         might still need thenm.
         At the time of writing this document, WebSphere does not provide a way to configure a global timeout at neither the cluster, 
         server, application nor ejb-jar level. It has to be done for each stateful bean individually.
         This is done by adding a file named <literal>META-INF/ibm-ejb-jar-ext.xml</literal> in the EJB module, and declare the timeout value for each bean:
         <programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<ejb-jar-ext 
  xmlns="http://websphere.ibm.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://websphere.ibm.com/xml/ns/javaee 
                      http://websphere.ibm.com/xml/ns/javaee/ibm-ejb-jar-ext_1_0.xsd"
  version="1.0">

  <session name="BookingListAction"><time-out value="605"/></session>
  <session name="ChangePasswordAction"><time-out value="605"/></session>
   
</ejb-jar-ext>]]></programlisting>
      </para>
      <para>
         The <literal>time-out</literal> is expressed in seconds and must be higher than the Seam conversation expiration timeout 
         and a few minutes higher than the user's HTTP session timeout (The session expiration timeout can trigger a few minutes
         after the number of minutes declared to expire s for the HTTP session expiration).   
	  </para>
	</section>


    <section id="jee5-websphere-section">
	  <title>The <literal>jee5/booking</literal> example</title>

      <para>
        The<literal>jee5/booking</literal>example is based on the Hotel	Booking example (which runs on JBoss AS). 
        Out of the box, it is designed to run on Glassfish, but with the following steps, it can be deployed on 
        WebSphere. It is located in the <literal>$SEAM_DIST/examples/jee5/booking</literal> directory.
	  </para>
     
      <para>
        For running this example, we'll use the second JNDI mapping strategy ("Override the default names generated by WebSphere") 
        as we don't want to change the java code to add the <literal>@JndiName</literal> annotation as in the first strategy. 
      </para>
       
      <section>
        <title>Building the <literal>jee5/booking</literal> example</title>
			
        <para>
          Building it only requires running the correct ant command: <programlisting>ant -f build-websphere7.xml</programlisting>
          This will create container specific distribution and exploded archive directories with the <literal>websphere7</literal> label.
        </para>
      </section>
        
      <section id="jee5-websphere-deploy">
        <title>Deploying the <literal>jee5/booking</literal> example</title>
        <para>  
          The steps below are for the WAS version stated above.The ports are default values, if you changed them, you must substitute the values.
          <orderedlist>
			<listitem>
                 Log in to the administration console
                 <programlisting><![CDATA[http://localhost:9060/admin]]></programlisting>
                 Enter your userid annd/or your password if security is enabled for the console.
            </listitem>
              
            <listitem>
              <para>
                Go to the <literal>WebSphere enterprise applications</literal> menu option under the <literal>Applications --> Application Type</literal>
                left side menu.
              </para>
            </listitem>
              
            <listitem>
              <para>
                At the top of the	<literal>Enterprise	Applications</literal>	table select <literal>Install</literal>. 
                Below are installation wizard pages and what needs to done on each:
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>Preparing for the application installation</literal>
                      <itemizedlist>
                        <listitem>
                          <para>
                            Browse to the <literal>examples/jee5/booking/dist-websphere7/jboss-seam-jee5.ear</literal>
                            file using the file upload widget.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Select the <literal>Next</literal> button.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Select the <literal>Fast Path</literal> button.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Select the <literal>Next</literal> button.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>Select installation options</literal>
                      <itemizedlist>
                        <listitem>
                          <para>
                            Select the <literal>Deploy enterprise beans and Allow EJB reference targets to resolve automatically</literal>
                            check boxes at the bottom of the page. This will let WebSphere use its simplified JNDI reference mapping.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Select the <literal>Next</literal> button.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>Map modules to servers</literal>
                      <itemizedlist>
                        <listitem>
                          <para>
                            No changes needed here as we only have one server. Select the <literal>Next</literal>button.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>Map virtual hosts for Web modules</literal>
                      <itemizedlist>
                        <listitem>
                          <para>
                            No changes needed here as we only have one virtual host. Select the <literal>Next</literal>button.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>Summary</literal>
                      <itemizedlist>
                        <listitem>
                          <para>No changes needed here. Select the <literal>Finish</literal> button.</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>Installation</literal>
                      <itemizedlist>
                        <listitem>
                           <para>Now you will see WebSphere installing and deploying your application.</para>
                        </listitem>
                        <listitem>
                          <para>
                            When done, select the <literal>Save</literal> link and you will be returned to the
                            <literal>Enterprise Applications</literal> table.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      To start the application select our application in the list, then click on the <literal>Start</literal>
                       button at the top of the table.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          
            <listitem>
              <para>
                You can now access the application at <literal>http://localhost:9080/seam-jee5-booking</literal>
              </para>
            </listitem>
          </orderedlist>
        </para>
      </section>
      
      <section>
        <title>Deviation from the original base files</title>
        Below are the differences between the base configuration files and the WebSphere specific files held in the <literal>resources-websphere7</literal> directory.
        <itemizedlist>
          <listitem>
            <para>
              <literal>META-INF/ejb-jar.xml</literal>
              &#8212; Removed all the EJB references
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>META-INF/ibm-ejb-jar-bnd.xml</literal>
              &#8212; This WebSphere specific file has been added as we use the second JNDI mapping strategy. 
              It defines, for each session bean, the name WebSphere will use to bind it its JNDI name space
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>META-INF/ibm-ejb-jar-ext.xml</literal>
              &#8212; This WebSphere specific file defines to WebSphere, the timeout value for each stateful bean 
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>META-INF/persistence.xml</literal>
              &#8212; The main changes here are for the datasource JNDI path,
              switching to the WebSphere transaction manager lookup class,
              turning off the <literal>hibernate.transaction.flush_before_completion</literal> toggle,
              and forcing the Hibernate dialect to be <literal>GlassfishDerbyDialect</literal>
              how as using the integrated Derby database
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>WEB-INF/components.xml</literal>
              &#8212; the change here is <literal>jndi-pattern</literal>
              to use <literal>ejblocal:#{ejbname}</literal> as using the second 
              JNDI matching strategy
            </para>
          </listitem>
          <listitem>
          <para>
            <literal>WEB-INF/web.xml</literal>
              &#8212; Remove all the <literal>ejb-local ref</literal> except the one for
              <literal>EjbSynchronizations</literal> bean.
              Changed the ref fo this bean to <literal>ejblocal:EjbSynchronizations</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>import.sql</literal>
              &#8212; due to the cutomized hibernate Derby dialect, the <literal>ID</literal>
              column can not be populated by this file and was removed.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Also the build procedure has been changed to include the <literal>log4j.jar</literal> file
          and exclude the <literal>concurrent.jar</literal> and <literal>jboss-common-core.jar</literal> files.
        </para>
        
      </section>
    </section>




    <section>
      <title>The <literal>jpa</literal> booking example</title>
        
        <para>
			This is the Hotel Booking example implemented in Seam POJOs and using Hibernate JPA
			with JPA transactions. It does not use EJB3.
		</para>

		<para>
          The example already has a breakout of configurations and build
          scripts for many of the common containers including WebSphere.
        </para>

		<para>
          First thing, we are going to do is build and deploy that example. 
          Then we'll go over some key changes that we needed.
        </para>

		<section>
          <title>Building the <literal>jpa</literal> example</title>
          <para>
            Building it only requires running the correct ant command:
            <programlisting>ant websphere7</programlisting>
            This will create container specific distribution and exploded archive directories with the
            <literal>websphere7</literal> label.
          </para>
		</section>
      
        <section>
          <title>Deploying the <literal>jpa</literal> example</title>
          <para>
            Deploying <literal>jpa</literal> application  is very similar to the <literal>jee5/booking</literal>
            example at <xref linkend="jee5-websphere-deploy" />.
            The main difference is, that this time, we will deploy a war file instead of an ear file,
            and we'll have to manually specify the context root of the application.
          </para>
          <para>
            Follow the same instructions as for the <literal>jee5/booking</literal> sample. Select the   
            <literal>examples/jpa/dist-websphere7/jboss-seam-jpa.war</literal> file on the first page and on the 
            <literal>Map context roots for Web modules</literal> page (after the <literal>Map virtual host for Web module</literal>),
            enter the context root you want to use for your application in the <literal>Contect Root</literal> input field. 
          </para>
          
          <para>
            When started, you can now access the application at the <literal>http://localhost:9080/&lt;context root&gt;</literal>.
          </para>
        </section>

      <section>
        <title>Deviation from the generic base files</title>
        Below are the configuration file differences between the base configuration files and the files customized
        for WebSphere held in the <literal>resources-websphere7</literal> directory.
        <itemizedlist>
          <listitem>
            <para>
              <literal>META-INF/persistence.xml</literal>
              &#8212; The main changes here are for the datasource JNDI path,
              switching to the WebSphere transaction manager look up class,
              turning off the <literal>hibernate.transaction.flush_before_completion</literal> toggle,
              and forcing the Hibernate dialect to be <literal>GlassfishDerbyDialect</literal>
              how as using the integrated Derby database
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>import.sql</literal>
              &#8212; due to the cutomized hibernate Derby dialect, the <literal>ID</literal>
              column can not be populated by this file and was removed.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Also the build procedure have been changed to include the <literal>log4j.jar</literal> file
          and exclude the <literal>concurrent.jar</literal> and <literal>jboss-common-core.jar</literal> files.
        </para>
        
      </section>
    </section>


    <section>
      <title>Deploying an application created using <literal>seam-gen</literal> on WebSphere V7</title>

      <para>
			<literal>seam-gen</literal>
			is a very useful tool for developers
			to quickly get an application up and running, and provides a foundation
			to add your own functionality. Out of box
			<literal>seam-gen</literal>
			will produce applications configured to run on JBoss AS. These
			instructions will show the steps needed to get it to run on
			WebSphere. This section will take you through the exact steps.
		</para>

		<section>
			<title>Running <literal>seam-gen</literal> Setup </title>
			<para>
				The first step is setting up
				<literal>seam-gen</literal>
				to
				construct the base project. There are several choices made below,
				specifically the datasource and hibernate values that we will adjust
				once the project is created.
			</para>


			<programlisting><![CDATA[
./seam setup
Buildfile: build.xml

init:

setup:
     [echo] Welcome to seam-gen :-)
    [input] Enter your Java project workspace (the directory that contains your 
Seam projects) [C:/Projects] [C:/Projects]
/home/jbalunas/workspace
    [input] Enter your JBoss home directory [C:/Program Files/jboss-4.2.3.GA] 
[C:/Program Files/jboss-4.2.3.GA]
/home/jbalunas/jboss/jboss-4.2.3.GA
    [input] Enter the project name [myproject] [myproject]
websphere_example
     [echo] Accepted project name as: websphere_example
    [input] Do you want to use ICEFaces instead of RichFaces [n] (y, [n], )

    [input] skipping input as property icefaces.home.new has already been set.
    [input] Select a RichFaces skin [blueSky] ([blueSky], classic, ruby, wine, 
deepMarine, emeraldTown, sakura, DEFAULT)

    [input] Is this project deployed as an EAR (with EJB components) or a WAR 
(with no EJB support) [ear]  ([ear], war, )

    [input] Enter the Java package name for your session beans [org.jboss.seam.
tutorial.websphere.action] [org.jboss.seam.tutorial.websphere.action]
org.jboss.seam.tutorial.websphere.action 
    [input] Enter the Java package name for your entity beans [org.jboss.seam.
tutorial.websphere.model] [org.jboss.seam.tutorial.websphere.model]
org.jboss.seam.tutorial.websphere.model  
    [input] Enter the Java package name for your test cases [org.jboss.seam.
tutorial.websphere.action.test] [org.jboss.seam.tutorial.websphere.action.test]
org.jboss.seam.tutorial.websphere.test
    [input] What kind of database are you using? [hsql]  ([hsql], mysql, oracle,
 postgres, mssql, db2, sybase, enterprisedb, h2)

    [input] Enter the Hibernate dialect for your database [org.hibernate.
dialect.HSQLDialect] [org.hibernate.dialect.HSQLDialect]

    [input] Enter the filesystem path to the JDBC driver jar [/tmp/seam/lib/hsqldb.jar] 
[/tmp/seam/lib/hsqldb.jar]

    [input] Enter JDBC driver class for your database [org.hsqldb.jdbcDriver] 
[org.hsqldb.jdbcDriver]

    [input] Enter the JDBC URL for your database [jdbc:hsqldb:.] 
[jdbc:hsqldb:.]

    [input] Enter database username [sa] [sa]

    [input] Enter database password [] []

    [input] Enter the database schema name (it is OK to leave this blank) [] []

    [input] Enter the database catalog name (it is OK to leave this blank) [] []

    [input] Are you working with tables that already exist in the database? [n]
  (y, [n], )

    [input] Do you want to drop and recreate the database tables and data in 
import.sql each time you deploy? [n]  (y, [n], )

[propertyfile] Creating new property file: 
/rhdev/projects/jboss-seam/svn-seam_2_2/jboss-seam-2_2/seam-gen/build.properties
     [echo] Installing JDBC driver jar to JBoss server
     [copy] Copying 1 file to /home/jbalunas/jboss/jboss-4.2.3.GA/server/default/lib
     [echo] Type 'seam create-project' to create the new project

BUILD SUCCESSFUL
Total time: 3 minutes 5 seconds]]></programlisting>

			<para>
				Type
				<literal>./seam new-project</literal>
				to create your
				project and
				<literal>cd
					/home/jbalunas/workspace/websphere_example</literal>
				to the
				newly created structure.
			</para>

		</section>
		<section>
			<title>Changes needed for deployment to Websphere</title>
			<para>We now need to make some changes to the generated project.
			</para>
			<section>
				<title>Configuration file changes</title>
				<variablelist>
					<varlistentry>
						<term>
							<literal>resources/META-INF/persistence-dev.xml
							</literal>
						</term>
						<listitem>
							<itemizedlist>
								<listitem>
									<para>
										Alter the
										<literal>jta-data-source</literal>
										to be
										<literal>DefaultDatasource</literal>
										. We are
										going to be using the integrated Websphere
										DB.
									</para>
								</listitem>
								<listitem>
									<para>
										Add or change the properties below.
										These are described in detail at
										<xref linkend="jee5-websphere-section" />
										:
									</para>

									<programlisting role="XML"><![CDATA[
<property name="hibernate.dialect" value="GlassfishDerbyDialect"/>
<property name="hibernate.hbm2ddl.auto" value="update"/>
<property name="hibernate.show_sql" value="true"/>
<property name="hibernate.format_sql" value="true"/>
<property name="hibernate.cache.provider_class" 
          value="org.hibernate.cache.HashtableCacheProvider"/>
<property name="hibernate.transaction.manager_lookup_class" 
          value="org.hibernate.transaction.WebSphereExtendedJTATransactionLookup"/>]]></programlisting>
								</listitem>
								<listitem>
									<para> Remove the JBoss AS specific method of exposing
										the EntityManagerFactory: </para>

									<programlisting role="XML"><![CDATA[<property 
 name="jboss.entity.manager.factory.jndi.name" 
 value="java:/websphere_exampleEntityManagerFactory">]]></programlisting>
								</listitem>
								<listitem>
									<para>
										You'll need to alter
										<literal>persistence-prod.xml</literal>
										as
										well if you want to deploy to Websphere using the
										prod profile.
									</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>src/GlassfishDerbyDialect.java
							</literal>
						</term>
						<listitem>
							<para>
								As with other examples we need to include this java class for
								DB support. It can be copied from the
								<literal>jpa</literal>
								example into the
								<literal>websphere_example/src</literal>
								directory.

								<programlisting><![CDATA[
cp $SEAM/examples/jpa/src/GlassfishDerbyDialect.java
   ./src]]></programlisting>
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>resources/META-INF/jboss-app.xml
							</literal>
						</term>
						<listitem>
							<para>
								You can delete this file as we aren't deploying to JBoss
								AS (
								<literal>jboss-app.xml</literal>
								is used to enable
								classloading isolation in JBoss AS)
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>resources/*-ds.xml</literal>
						</term>
						<listitem>
							<para> You can delete these file as we aren't deploying to
								JBoss AS (these files define datasources in JBoss AS, we
								are using Websphere's default datasource) </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>resources/WEB-INF/components.xml
							</literal>
						</term>
						<listitem>
							<itemizedlist>
								<listitem>
									<para>
										Enable container managed transaction
										integration - add the
										<literal>
											&lt;transaction:ejb-transaction /&gt; </literal>
										component, and it's namespace
										declaration
										<literal>
											xmlns:transaction="http://jboss.com/products/seam/transaction"
										</literal>
									</para>
								</listitem>
								<listitem>
									<para>
										Alter the
										<literal>jndi-pattern</literal>
										to
										<literal>
											java:comp/env/websphere_example/#{ejbName}
                           </literal>
									</para>
								</listitem>
								<listitem>
									<para>
										We do not need
										<literal>managed-persistence-context
										</literal>
										for this example and so can delete its
										entry.
									</para>


									<programlisting role="XML"><![CDATA[
<persistence:managed-persistence-context name="entityManager"
             auto-create="true"
             persistence-unit-jndi-name="java:/websphere_exampleEntityManagerFactory"/> ]]></programlisting>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>resources/WEB-INF/web.xml
							</literal>
						</term>
						<listitem>
							<para>
								As with the
								<literal>jee5/booking</literal>
								example we need to add EJB references to the web.xml. These
								references require replacing /local string in
								<literal>ejb-ref-name</literal>
								to flag them for
								Websphere to perform the proper binding.
							</para>


							<programlisting role="XML"><![CDATA[  
  <ejb-local-ref>
    <ejb-ref-name>websphere_example/AuthenticatorAction</ejb-ref-name>
    <ejb-ref-type>Session</ejb-ref-type>
    <local>org.jboss.seam.tutorial.websphere.action.Authenticator</local>
  </ejb-local-ref>	
   
  <ejb-local-ref>
    <ejb-ref-name>websphere_example/EjbSynchronizations</ejb-ref-name>  
    <ejb-ref-type>Session</ejb-ref-type>
    <local>org.jboss.seam.transaction.LocalEjbSynchronizations</local>
  </ejb-local-ref>]]></programlisting>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			<section>
				<title>
					Creating the
					<literal>AuthenticatorAction</literal>
					EJB
				</title>
				<para>
					We want to take the existing
					<literal>Authenticator</literal>
					Seam POJO component and create an EJB3 out of it.
				</para>
				<orderedlist>
					<listitem>
						<para>Change the generated Authenticator class</para>
						<itemizedlist>
							<listitem>
								<para>
									Rename the class to
									<literal>AuthenticatorAction</literal>
								</para>
							</listitem>
							<listitem>
								<para>
									Add the
									<literal>@Stateless</literal>
									annotation to the new
									<literal>AuthenticatorAction</literal>
									class.
								</para>
							</listitem>
							<listitem>
								<para>
									Create an interface called
									<literal>Authenticator</literal>
									which
									<literal>AuthenticatorAction</literal>
									implements (EJB3 requires session beans to have a
									local interface). Annotate the interface with
									<literal>@Local</literal>
									, and add a single method
									with same signature as the
									<literal>authenticate</literal>
									in
									<literal>AuthenticatorAction</literal>
									.
								</para>
							</listitem>
						</itemizedlist>


						<programlisting role="JAVA"><![CDATA[
@Name("authenticator") @Stateless public class
            AuthenticatorAction implements Authenticator {]]></programlisting>


						<programlisting role="JAVA"><![CDATA[
@Local public interface Authenticator { 
  public boolean authenticate(); 
}]]></programlisting>
					</listitem>
					<listitem>
						<para>
							We've already added its reference to the
							<literal>web.xml</literal>
							file so are good to go.
						</para>
					</listitem>
				</orderedlist>
			</section>
			<section>
				<title>
					Extra jar dependencies and other changes to the
					<literal>build.xml</literal>
				</title>
				<para>
					This application has similar requirements as the
					<literal>jee5/booking</literal>
					example.
				</para>

				<itemizedlist>
					<listitem>
						<para>
							Change the default target to
							<literal>archive</literal>
							(we aren't going to cover
							automatic deployment to Websphere).
						</para>


						<programlisting role="XML"><![CDATA[
<project name="websphere_example" default="archive" basedir=".">]]></programlisting>

					</listitem>
					<listitem>
						<para>
							Websphere looks for the drools
							<literal>/security.drl</literal>
							file in the root of the
							<literal>war</literal>
							file instead of the root of the
							<literal>websphere_example.jar</literal>
							so we need
							to have the
							<literal>build.xml</literal>
							move it to the
							correct location at build time. The following must be added at
							the top of the
							<literal> &lt;target name="war"
								depends="compile" description="Build the distribution
								.war file"&gt; </literal>
							target.
						</para>

						<programlisting role="XML"><![CDATA[
<copy todir="${war.dir}">
   <fileset dir="${basedir}/resources" >
       <include name="*.drl" />
   </fileset>
</copy>]]></programlisting>
					</listitem>
					<listitem>
						<para>
							Now we need to get extra jars into the
							<literal>build.xml</literal>
							. Look for the
							<literal>&lt;fileset dir="${basedir}"&gt;</literal>
							section
							of the task below. Add the new includes at the bottom of
							the fileset.
						</para>


						<programlisting role="XML"><![CDATA[
<target name="ear" description="Build the EAR">
    <copy todir="${ear.dir}">
            <fileset dir="${basedir}/resources">
                    <include name="*jpdl.xml" />
                    <include name="*hibernate.cfg.xml" />
                    <include name="jbpm.cfg.xml" />
            </fileset>

            <fileset dir="${basedir}">
                    <include name="lib/jbpm*.jar" />
                    <include name="lib/jboss-el.jar" />
                    <include name="lib/drools-*.jar"/>
                    <include name="lib/core.jar"/>
                    <include name="lib/janino*.jar"/>
                    <include name="lib/antlr-*.jar"/>
                    <include name="lib/mvel*.jar"/>
                  <include name="lib/richfaces-api*.jar" />
            </fileset>
    </copy>
    <copy todir="${ear.dir}/META-INF">
            <fileset dir="${basedir}/resources/META-INF">
                    <include name="application.xml" />
                    <include name="jboss-app.xml" />
            </fileset>
    </copy>
</target>]]></programlisting>
						<itemizedlist>
							<listitem>
								<para>Hibernate dependencies</para>
								<programlisting role="XML"><![CDATA[
   <!-- Hibernate and deps -->
   <include name="lib/hibernate.jar"/>
   <include name="lib/hibernate-commons-annotations.jar"/>
   <include name="lib/hibernate-annotations.jar"/>
   <include name="lib/hibernate-entitymanager.jar"/>
   <include name="lib/hibernate-validator.jar"/>
   <include name="lib/jboss-common-core.jar" />]]></programlisting>
							</listitem>
							<listitem>
								<para> Third party dependencies.</para>
								<programlisting role="XML"><![CDATA[
   <!-- 3rd party and supporting jars -->
   <!--<include name="lib/log4j.jar" />-->
   <include name="lib/javassist.jar"/>
   <include name="lib/dom4j.jar" />
   <include name="lib/concurrent.jar" />
   <include name="lib/cglib.jar"/>
   <include name="lib/asm.jar"/>
   <include name="lib/antlr.jar" />
   <include name="lib/commons-logging.jar" />
   <include name="lib/commons-collections.jar" />]]></programlisting>
							</listitem>
							<listitem>
								<para>
									<literal>jboss-seam.jar</literal>
									- this is needed in
									the
									<literal>ear</literal>
									base
									directory.
								</para>
								<programlisting role="XML"><![CDATA[
   <!-- seam jar -->
   <include name="lib/jboss-seam.jar" />]]></programlisting>
							</listitem>
						</itemizedlist>

						<para>You should end up with something like:</para>
						<programlisting role="XML"><![CDATA[<fileset dir="${basedir}">
               
   <include name="lib/jbpm*.jar" />
   <include name="lib/jboss-el.jar" />
   <include name="lib/drools-*.jar"/>
   <include name="lib/core.jar"/>
   <include name="lib/janino*.jar"/>
   <include name="lib/antlr-*.jar"/>
   <include name="lib/mvel*.jar"/>
   <include name="lib/richfaces-api*.jar" />
                                 
   <!-- Hibernate and deps -->
   <include name="lib/hibernate.jar"/>
   <include name="lib/hibernate-commons-annotations.jar"/>
   <include name="lib/hibernate-annotations.jar"/>
   <include name="lib/hibernate-entitymanager.jar"/>
   <include name="lib/hibernate-validator.jar"/>
   <include name="lib/jboss-common-core.jar" />

   <!-- 3rd party and supporting jars -->
   <include name="lib/javassist.jar"/>
   <include name="lib/dom4j.jar" />
   <include name="lib/concurrent.jar" />
   <include name="lib/cglib.jar"/>
   <include name="lib/asm.jar"/>
   <include name="lib/antlr.jar" />
   <include name="lib/commons-logging.jar" />
   <include name="lib/commons-collections.jar" />
               
   <!-- seam jar -->
   <include name="lib/jboss-seam.jar" />
                           
</fileset>]]></programlisting>

					</listitem>
				</itemizedlist>

			</section>
			<section>
				<title> Building and deploying the seam-gen'd application to
					Websphere
            </title>

				<itemizedlist>
					<listitem>
						<para>
							Build your application by calling
							<literal>ant</literal>
							in the base directory of your
							project (ex.
							<literal>/home/jbalunas/workspace/websphere_example
							</literal>
							). The target of the build will be
							<literal>dist/websphere_example.ear
							</literal>
							.
						</para>
					</listitem>

					<listitem>
						<para>
							To deploy the application follow the instructions here :
							<xref linkend="jee5-websphere-deploy" />
							but use references to
							this project
							<literal>websphere_example</literal>
							instead of
							<literal>jboss-seam-jee5</literal>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							Checkout the app at:
							<literal>http://localhost:9080/websphere_example/index.html
							</literal>
						</para>
					</listitem>
				</itemizedlist>

			</section>
		</section>
	</section>

</chapter>
